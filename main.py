import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

st.set_page_config(page_title="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á", page_icon="üåä")

if 'app_started' not in st.session_state:
    st.session_state.app_started = False

# CSS + JS + fade-in animation + ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
st.markdown(r"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit&display=swap');
    html, body, .stApp {
        background-color: #f1f8e9;
        font-family: 'Kanit', sans-serif;
        color: #1b5e20;
    }
    .block-container { padding-top: 2rem; }
    .fade-box {
        background: linear-gradient(to right, #dcedc8, #f0f4c3);
        border-left: 8px solid #81c784;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }
    .stButton>button {
        background-color: #66bb6a;
        color: white;
        border-radius: 8px;
        padding: 0.5em 1.5em;
        font-size: 18px;
        cursor: pointer;
    }
    .stButton>button:hover {
        background-color: #388e3c;
        transform: scale(1.03);
    }
    .green-table {
        background-color: #f1f8e9;
        border-collapse: collapse;
        width: 100%;
        font-family: 'Kanit', sans-serif;
        font-size: 18px;
        margin-top: 20px;
        table-layout: fixed;  /* ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå */
    }
    .green-table th, .green-table td {
        border: 1px solid #c5e1a5;
        padding: 10px;
        text-align: center;
        word-wrap: break-word;  /* ‡∏´‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß */
        overflow-wrap: break-word;
    }
    .green-table th {
        background-color: #aed581;
        color: #1b5e20;
    }
    .green-table tr:nth-child(odd) {
        background-color: #cbe0b1;
    }
    /* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå */
    .green-table th:nth-child(1), .green-table td:nth-child(1) { width: 18%; }   /* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */
    .green-table th:nth-child(2), .green-table td:nth-child(2) { width: 22%; }   /* ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ */
    .green-table th:nth-child(3), .green-table td:nth-child(3) { width: 20%; }   /* ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° */
    .green-table th:nth-child(4), .green-table td:nth-child(4) { width: 20%; }   /* Œî ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô */
    .green-table th:nth-child(5), .green-table td:nth-child(5) { width: 20%; }   /* ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏° */

    /* Fade-in animation */
    .fade-in {
        animation: fadeInAnimation ease 1.2s;
        animation-iteration-count: 1;
        animation-fill-mode: forwards;
    }
    @keyframes fadeInAnimation {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    </style>
    <script>
    document.addEventListener('contextmenu', e => {
        e.preventDefault();
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ');
    });
    </script>
""", unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
if not st.session_state.app_started:
    st.markdown("""<div class="fade-box fade-in" style="text-align:center; margin-top:100px;">
        <h1>üë©‚Äçüåæ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£</h1>
        <p style="font-size:20px;">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ</p>
    </div>""", unsafe_allow_html=True)

    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.session_state.app_started = True


# ========================
# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ (‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°)
# ========================
else:
    st.markdown("""<div class="fade-in">
        <div class="fade-box">
            <h2>üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á</h2>
            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å</p>
        </div>
    </div>""", unsafe_allow_html=True)

    def load_and_clean_df(df):
        try:
            def convert(row):
                try:
                    d, m, y_th = map(int, str(row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']).split("/"))
                    y_ad = y_th - 543
                    h, mi, s = map(int, str(row['‡πÄ‡∏ß‡∏•‡∏≤']).split(":"))
                    return datetime(y_ad, m, d, h, mi, s)
                except:
                    return pd.NaT

            df['ds'] = df.apply(convert, axis=1)
            df['y'] = pd.to_numeric(df['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥'], errors='coerce')
            return df[['ds', 'y']].dropna()
        except:
            return pd.DataFrame()

    def load_and_clean_csv(file):
        try:
            df = pd.read_csv(file, encoding='utf-8')

            if {'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥'}.issubset(df.columns):
                return load_and_clean_df(df)

            elif {'ds', 'y'}.issubset(df.columns):
                df['ds'] = pd.to_datetime(df['ds'], errors='coerce')
                df['y'] = pd.to_numeric(df['y'], errors='coerce')
                return df[['ds', 'y']].dropna()

            elif df.shape[1] >= 3:
                df.columns = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥']
                return load_and_clean_df(df)

            return pd.DataFrame()
        except Exception as e:
            st.warning(f"‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            return pd.DataFrame()

    files = ['BP2025_all_months_for_prophet.csv', '‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á.csv', '‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á (3).csv']
    dfs = [load_and_clean_csv(f) for f in files if os.path.isfile(f)]
    df = pd.concat(dfs, ignore_index=True).drop_duplicates(subset='ds').sort_values(by='ds')

    if df.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        st.stop()

    median_level = 2.82
    high_threshold = 3.51
    low_threshold = 1.90

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", pd.date_range(df['ds'].min(), df['ds'].max(), freq='MS').strftime("%B %Y"))
    month_dt = pd.to_datetime("01 " + month, format="%d %B %Y")
    df_month = df[df['ds'].dt.to_period("M") == month_dt.to_period("M")]

    if df_month.empty:
        st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
    else:
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        daily = df_month.groupby(df_month['ds'].dt.date)['y'].mean().reset_index()
        daily.columns = ['date', 'level_avg']

        rows = []
        for i in range(len(daily)):
            today = daily.iloc[i]
            if i > 0:
                prev = daily.iloc[i - 1]
                diff = today['level_avg'] - prev['level_avg']
                delta = f"{diff:+.2f}"
                trend = "üåä ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô" if diff > 0 else "‚¨áÔ∏è ‡∏ô‡πâ‡∏≥‡∏•‡∏á"
            else:
                delta = "-"
                trend = "-"

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏•‡∏∑‡∏≠/‡∏à‡∏∑‡∏î/‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            if today['level_avg'] >= high_threshold:
                salinity = "‡πÄ‡∏Ñ‡πá‡∏°"
            elif today['level_avg'] <= low_threshold:
                salinity = "‡∏à‡∏∑‡∏î"
            else:
                salinity = "‡∏õ‡∏Å‡∏ï‡∏¥"

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏°‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á
            if trend == "üåä ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô":
                salinity_trend = "‡∏ô‡πâ‡∏≥‡πÄ‡∏Ñ‡πá‡∏°"
            elif trend == "‚¨áÔ∏è ‡∏ô‡πâ‡∏≥‡∏•‡∏á":
                salinity_trend = "‡∏ô‡πâ‡∏≥‡∏à‡∏∑‡∏î"
            else:
                salinity_trend = "-"

            rows.append({
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": today['date'].strftime("%-d %b %Y"),
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏°.)": f"{today['level_avg']:.2f} ({salinity})",
                "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°": trend,
                "Œî ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏°.)": delta,
                "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏°": salinity_trend
            })

        df_summary = pd.DataFrame(rows)

        # ------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets -------------
        def connect_to_google_sheets():
            scope = ["https://docs.google.com/spreadsheets/d/1RHi72uEhlTXParxn0jDfLwKJcQGJoamW7XYjvvnhIac/edit?usp=sharing", "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name("bangprakong-e632dd777e72.json", scope)
            client = gspread.authorize(creds)
            return client

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets
        def write_to_google_sheets(dataframe, sheet_name):
            client = connect_to_google_sheets()
            sheet = client.open_by_key("1RHi72uEhlTXParxn0jDfLwKJcQGJoamW7XYjvvnhIac").sheet1  # ‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á Google Sheets
            for i, row in dataframe.iterrows():
                sheet.append_row([row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], row["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥"], row["‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°"], row["‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏°"]])  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A, B, C, D

        # ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Streamlit ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ Google Sheets
        if st.button("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets"):
            write_to_google_sheets(df_summary, "Water Level Data")  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ Google Sheets ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            st.success("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheets ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏°)
        table_html = "<table class='green-table'><tr><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th><th>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏°.)</th><th>‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°</th><th>Œî ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏°.)</th><th>‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏°</th></tr>"
        for _, row in df_summary.iterrows():
            table_html += f"<tr><td>{row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']}</td><td>{row['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏°.)']}</td><td>{row['‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°']}</td><td>{row['Œî ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏°.)']}</td><td>{row['‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡πá‡∏°']}</td></tr>"
        table_html += "</table>"

        st.markdown("üóìÔ∏è **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**", unsafe_allow_html=True)
        st.markdown(table_html, unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)  # ‡∏õ‡∏¥‡∏î div.fade-in
