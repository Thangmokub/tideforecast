import streamlit as st
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
# -------------------------------
@st.cache_data(ttl=3600)
def fetch_tide_data():
    url = "https://www.thailandtidetables.com/‡πÑ‡∏ó‡∏¢/‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á-‡∏õ‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á-‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤-480.php"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    table = soup.find("table", {"class": "tide-table"})

    if not table:
        return pd.DataFrame(), "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"

    rows = table.find_all("tr")
    data = []

    for row in rows[1:]:
        cols = row.find_all("td")
        if len(cols) >= 2:
            time_str = cols[0].text.strip()
            level_str = cols[1].text.strip().replace("m", "")
            try:
                dt = datetime.strptime(time_str, "%H:%M")
                full_dt = datetime.combine(datetime.today(), dt.time())
                level = float(level_str)
                data.append({"ds": full_dt, "y": level})
            except:
                continue

    if not data:
        return pd.DataFrame(), "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ"

    df = pd.DataFrame(data)
    return df, None

# -------------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Streamlit App
# -------------------------------
st.set_page_config(page_title="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á", page_icon="üåä")

if 'app_started' not in st.session_state:
    st.session_state.app_started = False

# CSS/JS Styling
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit&display=swap');
    html, body, .stApp {
        background-color: #f1f8e9;
        font-family: 'Kanit', sans-serif;
        color: #1b5e20;
    }
    .block-container { padding-top: 2rem; }
    .fade-box {
        background: linear-gradient(to right, #dcedc8, #f0f4c3);
        border-left: 8px solid #81c784;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }
    .stButton>button {
        background-color: #66bb6a;
        color: white;
        border-radius: 8px;
        font-size: 18px;
    }
    .stButton>button:hover {
        background-color: #388e3c;
        transform: scale(1.03);
    }
    </style>
""", unsafe_allow_html=True)

# ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
if not st.session_state.app_started:
    st.markdown("""
    <div class="fade-box" style="text-align:center; margin-top:100px;">
        <h1>üë©‚Äçüåæ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£</h1>
        <p style="font-size:20px;">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ</p>
    </div>
    """, unsafe_allow_html=True)

    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.session_state.app_started = True
        st.rerun()

# -------------------------------
# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å
# -------------------------------
else:
    st.markdown("""
    <div class="fade-box">
        <h2>üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á</h2>
        <p>‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå</p>
    </div>
    """, unsafe_allow_html=True)

    df, error = fetch_tide_data()

    if error:
        st.error(error)
    elif df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    else:
        df['ds'] = pd.to_datetime(df['ds'])

        menu = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"])

        if menu == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå":
            st.title("üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô-‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")

            selected_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=datetime.today())
            selected_date = pd.to_datetime(selected_date)

            df_today = df[df['ds'].dt.date == selected_date.date()]
            if df_today.empty:
                st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            else:
                st.dataframe(df_today)

            st.subheader("üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")
            periods = st.slider("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á?", 6, 72, 24)

            df_past = df[df['ds'] <= datetime.now()]
            if len(df_past) < 10:
                st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
            else:
                model = Prophet()
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå..."):
                    model.fit(df_past)
                    future = model.make_future_dataframe(periods=periods, freq='H')
                    forecast = model.predict(future)

                st.session_state['forecast'] = forecast
                st.session_state['periods'] = periods

                st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                fig = model.plot(forecast)
                st.pyplot(fig)

                st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())

        elif menu == "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå":
            if 'forecast' in st.session_state:
                forecast = st.session_state['forecast']
                periods = st.session_state['periods']
                if len(forecast) > periods:
                    delta = forecast.iloc[-1]['yhat'] - forecast.iloc[-periods]['yhat']
                    if delta > 0:
                        st.success(f"üåä ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô {delta:.2f} ‡πÄ‡∏°‡∏ï‡∏£")
                    else:
                        st.info(f"‚¨áÔ∏è ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡∏•‡∏î {abs(delta):.2f} ‡πÄ‡∏°‡∏ï‡∏£")
                else:
                    st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
            else:
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏£‡∏Å")
