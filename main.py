import streamlit as st
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏à
st.set_page_config(page_title="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á", page_icon="üåä")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
if 'app_started' not in st.session_state:
    st.session_state.app_started = False

# CSS + JS
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit&display=swap');

    html, body, .stApp {
        background-color: #f1f8e9;
        font-family: 'Kanit', sans-serif;
        color: #1b5e20;
        transition: all 0.3s ease-in-out;
    }

    .block-container { padding-top: 2rem; }

    h1, h2, h3, h4 {
        color: #2e7d32;
        animation: fadeIn 1s ease-out;
    }

    .fade-box {
        background: linear-gradient(to right, #dcedc8, #f0f4c3);
        border-left: 8px solid #81c784;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        animation: fadeInUp 1s ease-out;
    }

    .stButton>button {
        background-color: #66bb6a;
        color: white;
        border-radius: 8px;
        padding: 0.5em 1.5em;
        font-size: 18px;
        transition: all 0.3s ease-in-out;
    }

    .stButton>button:hover {
        background-color: #388e3c;
        transform: scale(1.03);
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes fadeInUp {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    </style>
    <script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ');
    });
    document.addEventListener('keydown', function (event) {
        if ((event.ctrlKey && event.key.toLowerCase() === 'c') ||
            (event.ctrlKey && event.key.toLowerCase() === 'u') ||
            event.key === 'F12') {
            event.preventDefault();
            alert('üîí ‡∏´‡πâ‡∏≤‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ã‡∏≠‡∏£‡πå‡∏™‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
        }
    });
    </script>
""", unsafe_allow_html=True)

# ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
if not st.session_state.app_started:
    st.markdown("""
    <div class="fade-box" style="text-align:center; margin-top:100px;">
        <h1>üë©‚Äçüåæ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£</h1>
        <p style="font-size:20px;">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ</p>
    </div>
    """, unsafe_allow_html=True)

    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.session_state.app_started = True
        st.experimental_rerun()

# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å
else:
    st.markdown("""
    <div class="fade-box">
        <h2>üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á</h2>
        <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</p>
    </div>
    """, unsafe_allow_html=True)

    file_path = r"BP2025_all_months_for_prophet.csv"

    if not os.path.isfile(file_path):
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
    else:
        df = pd.read_csv(file_path)

        date_col = next((c for c in ['ds', 'date', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'Date', 'datetime'] if c in df.columns), None)
        if not date_col:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
        else:
            df['ds'] = pd.to_datetime(df[date_col])

            if 'y' not in df.columns:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'y' (‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥)")
            else:
                menu = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"])

                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                median_level = 2.82
                high_threshold = 3.51
                low_threshold = 1.90

                if menu == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå":
                    st.title("üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô-‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô")
                    selected_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π", value=pd.to_datetime("2025-01-01"))
                    selected_date = pd.to_datetime(selected_date)

                    df_today = df[df['ds'].dt.normalize() == selected_date]
                    if df_today.empty:
                        st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
                    else:
                        st.dataframe(df_today)

                    st.subheader("üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")
                    periods = st.slider("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á?", 6, 168, 24)

                    df_past = df[df['ds'] <= selected_date]
                    if len(df_past) < 10:
                        st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
                    else:
                        model = Prophet()
                        try:
                            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå..."):
                                model.fit(df_past)
                                future = model.make_future_dataframe(periods=periods, freq='H')
                                forecast = model.predict(future)

                            st.session_state['forecast'] = forecast
                            st.session_state['periods'] = periods

                            st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                            fig = model.plot(forecast)
                            ax = fig.gca()
                            ax.axhline(median_level, color='green', linestyle='--', label=f'‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥ ({median_level} ‡∏°.)')
                            ax.axhline(high_threshold, color='red', linestyle='--', label=f'üö® ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô (‚â• {high_threshold} ‡∏°.)')
                            ax.axhline(low_threshold, color='blue', linestyle='--', label=f'‚ö†Ô∏è ‡∏ô‡πâ‡∏≥‡∏•‡∏î‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô (‚â§ {low_threshold} ‡∏°.)')
                            ax.legend()
                            st.pyplot(fig)

                            st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                            st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())
                        except Exception as e:
                            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

                elif menu == "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå":
                    if 'forecast' in st.session_state:
                        forecast = st.session_state['forecast']
                        periods = st.session_state['periods']

                        if len(forecast) > periods:
                            delta = forecast.iloc[-1]['yhat'] - forecast.iloc[-periods]['yhat']
                            current_level = forecast.iloc[-1]['yhat']

                            if delta > 0:
                                msg = f"üåä ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô {delta:.2f} ‡πÄ‡∏°‡∏ï‡∏£"
                            else:
                                msg = f"‚¨áÔ∏è ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡∏•‡∏î {abs(delta):.2f} ‡πÄ‡∏°‡∏ï‡∏£"

                            if current_level >= high_threshold:
                                msg += " (üö® ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥!)"
                                st.error(msg)
                            elif current_level <= low_threshold:
                                msg += " (‚ö†Ô∏è ‡∏ô‡πâ‡∏≥‡∏•‡∏î‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥!)"
                                st.warning(msg)
                            else:
                                st.success(msg)
                        else:
                            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
                    else:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏£‡∏Å")
