# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
import os
from datetime import datetime

st.set_page_config(page_title="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á", page_icon="üåä")

if 'app_started' not in st.session_state:
    st.session_state.app_started = False

# CSS + JS
st.markdown(r"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit&display=swap');
    html, body, .stApp {
        background-color: #f1f8e9;
        font-family: 'Kanit', sans-serif;
        color: #1b5e20;
    }
    .block-container { padding-top: 2rem; }
    .fade-box {
        background: linear-gradient(to right, #dcedc8, #f0f4c3);
        border-left: 8px solid #81c784;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }
    .stButton>button {
        background-color: #66bb6a;
        color: white;
        border-radius: 8px;
        padding: 0.5em 1.5em;
        font-size: 18px;
    }
    .stButton>button:hover {
        background-color: #388e3c;
        transform: scale(1.03);
    }
    </style>
    <script>
    document.addEventListener('contextmenu', e => {
        e.preventDefault();
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ');
    });
    </script>
""", unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
if not st.session_state.app_started:
    st.markdown("""
    <div class="fade-box" style="text-align:center; margin-top:100px;">
        <h1>üë©‚Äçüåæ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£</h1>
        <p style="font-size:20px;">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ</p>
    </div>
    """, unsafe_allow_html=True)

    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.session_state.app_started = True
        st.rerun()

# ========================
# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
# ========================
else:
    st.markdown("""
    <div class="fade-box">
        <h2>üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á</h2>
        <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</p>
    </div>
    """, unsafe_allow_html=True)

    def load_and_clean_df(df):
        try:
            def convert(row):
                try:
                    d, m, y_th = map(int, str(row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']).split("/"))
                    y_ad = y_th - 543
                    h, mi, s = map(int, str(row['‡πÄ‡∏ß‡∏•‡∏≤']).split(":"))
                    return datetime(y_ad, m, d, h, mi, s)
                except:
                    return pd.NaT

            df['ds'] = df.apply(convert, axis=1)
            df['y'] = pd.to_numeric(df['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥'], errors='coerce')
            return df[['ds', 'y']].dropna()
        except:
            return pd.DataFrame()

    def load_and_clean_csv(file):
        try:
            df = pd.read_csv(file, encoding='utf-8')

            if {'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥'}.issubset(df.columns):
                return load_and_clean_df(df)

            elif {'ds', 'y'}.issubset(df.columns):
                df['ds'] = pd.to_datetime(df['ds'], errors='coerce')
                df['y'] = pd.to_numeric(df['y'], errors='coerce')
                return df[['ds', 'y']].dropna()

            elif df.shape[1] >= 3:
                df.columns = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥']
                return load_and_clean_df(df)

            return pd.DataFrame()
        except Exception as e:
            st.warning(f"‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            return pd.DataFrame()

    files = ['BP2025_all_months_for_prophet.csv','‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á.csv', '‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á (3).csv']
    dfs = [load_and_clean_csv(f) for f in files if os.path.isfile(f)]
    df = pd.concat(dfs, ignore_index=True).drop_duplicates(subset='ds').sort_values(by='ds')

    if df.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        st.stop()

    median_level = 2.82
    high_threshold = 3.51
    low_threshold = 1.90

    menu = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"])

    if menu == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå":
        st.title("üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô-‡∏ô‡πâ‡∏≥‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô")
        selected_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π", value=pd.to_datetime("2025-01-01"))
        selected_date = pd.to_datetime(selected_date)

        df_today = df[df['ds'].dt.normalize() == selected_date]
        if df_today.empty:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        else:
            st.dataframe(df_today)

        st.subheader("üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")
        periods = st.slider("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á?", 6, 168, 24)

        df_past = df[df['ds'] <= selected_date]
        if len(df_past) < 10:
            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
        else:
            model = Prophet()
            try:
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå..."):
                    model.fit(df_past)
                    future = model.make_future_dataframe(periods=periods, freq='H')
                    forecast = model.predict(future)

                st.session_state['forecast'] = forecast
                st.session_state['periods'] = periods

                st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                fig = model.plot(forecast)
                ax = fig.gca()
                ax.axhline(median_level, color='green', linestyle='--', label=f'‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥ ({median_level} ‡∏°.)')
                ax.axhline(high_threshold, color='red', linestyle='--', label=f'üö® ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô (‚â• {high_threshold} ‡∏°.)')
                ax.axhline(low_threshold, color='blue', linestyle='--', label=f'‚ö†Ô∏è ‡∏ô‡πâ‡∏≥‡∏•‡∏î‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô (‚â§ {low_threshold} ‡∏°.)')
                ax.legend()
                st.pyplot(fig)

                st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    elif menu == "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå":
        st.title("üìÜ ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", pd.date_range(df['ds'].min(), df['ds'].max(), freq='MS').strftime("%B %Y"))
        month_dt = pd.to_datetime("01 " + month, format="%d %B %Y")

        df_month = df[df['ds'].dt.to_period("M") == month_dt.to_period("M")]

        if df_month.empty:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        else:
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
            daily = df_month.groupby(df_month['ds'].dt.date)['y'].mean().reset_index()
            daily.columns = ['date', 'level']

            rows = []
            for i in range(1, len(daily)):
                today = daily.iloc[i]
                prev = daily.iloc[i - 1]

                delta = today['level'] - prev['level']
                trend = "üåä ‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô" if delta > 0 else "‚¨áÔ∏è ‡∏ô‡πâ‡∏≥‡∏•‡∏á"

                if today['level'] >= high_threshold:
                    salinity = "‡πÄ‡∏Ñ‡πá‡∏°"
                elif today['level'] <= low_threshold:
                    salinity = "‡∏à‡∏∑‡∏î"
                else:
                    salinity = "‡∏õ‡∏Å‡∏ï‡∏¥"

                level_info = f"(‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ {today['level']:.2f} ‡∏°.)"
                label = f"{trend} {level_info} {salinity}"

                rows.append({
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': today['date'].strftime("%-d %b"),
                    '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏°.)': f"{today['level']:.2f}",
                    '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°': label,
                    'Œî ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡∏°.)': f"{delta:+.2f}"
                })


            df_summary = pd.DataFrame(rows).head(7)

            # ‡∏™‡πÑ‡∏ï‡∏•‡πå HTML ‡∏ò‡∏µ‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
            styled_table = """
            <style>
            .green-table {
                background-color: #f1f8e9;
                border-collapse: collapse;
                width: 100%;
                font-family: 'Kanit', sans-serif;
                font-size: 18px;
                margin-top: 20px;
            }
            .green-table th, .green-table td {
                border: 1px solid #c5e1a5;
                padding: 10px;
                text-align: center;
            }
            .green-table th {
                background-color: #aed581;
                color: #1b5e20;
            }
            .green-table tr:nth-child(even) {
                background-color: #cbe0b1;
            }
            </style>
            """

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á HTML
            table_html = "<table class='green-table'><tr><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th><th>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏°.)</th><th>‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°</th><th>Œî ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡∏°.)</th></tr>"
            for _, row in df_summary.iterrows():
                table_html += f"<tr><td>{row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']}</td><td>{row['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏°.)']}</td><td>{row['‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°']}</td><td>{row['Œî ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡∏°.)']}</td></tr>"
            table_html += "</table>"

            st.markdown("üóìÔ∏è **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° 7 ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**", unsafe_allow_html=True)
            st.markdown(styled_table + table_html, unsafe_allow_html=True)
